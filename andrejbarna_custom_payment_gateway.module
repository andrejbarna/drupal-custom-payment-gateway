<?php

/**
 * @file
 * Contains andrejbarna_custom_payment_gateway.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\commerce_checkout\Plugin\Commerce\CheckoutFlow\CheckoutFlowWithPanesInterface;
use Drupal\commerce_checkout\Plugin\Commerce\CheckoutPane\CheckoutPaneInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\MessageCommand;
use Drupal\commerce_order\Entity\OrderInterface;

/**
 * Implements hook_theme().
 */
function andrejbarna_custom_payment_gateway_theme() {
  return [
    'andrejbarna_custom_payment_gateway_rate' => [
      'variables' => [
        'rate' => NULL,
        'currency' => NULL,
        'amount' => NULL,
        'formatted_amount' => NULL,
      ],
      'template' => 'andrejbarna-custom-payment-gateway-rate',
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function andrejbarna_custom_payment_gateway_form_commerce_checkout_flow_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() === 'commerce_checkout.form') {
    $step_id = $route_match->getParameter('step');
    if ($step_id === 'review') {
      /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
      $order = $form_state->get('order');
      if (!$order instanceof OrderInterface) {
        return;
      }

      // Attach our library
      $form['#attached']['library'][] = 'andrejbarna_custom_payment_gateway/checkout';

      // Add the rate button before the payment buttons
      $form['rate_button'] = [
        '#type' => 'button',
        '#value' => t('Get Rate'),
        '#name' => 'get_rate',
        '#weight' => -1,
        '#attributes' => [
          'class' => ['button', 'button--primary', 'get-rate-button'],
        ],
        '#ajax' => [
          'callback' => 'andrejbarna_custom_payment_gateway_get_rate_callback',
          'wrapper' => 'rate-information',
          'progress' => [
            'type' => 'throbber',
            'message' => t('Getting rate...'),
          ],
        ],
      ];

      // Add a container for the rate information
      $form['rate_information'] = [
        '#type' => 'container',
        '#attributes' => [
          'id' => 'rate-information',
        ],
        '#weight' => -1,
      ];

      // Disable the payment buttons initially
      if (isset($form['actions']['next'])) {
        $form['actions']['next']['#attributes']['disabled'] = 'disabled';
        $form['actions']['next']['#attributes']['class'][] = 'payment-button';
      }

      // Add our submit handler
      $form['#validate'][] = 'andrejbarna_custom_payment_gateway_checkout_form_validate';
    }
  }
}

/**
 * Form validation handler for the checkout form.
 */
function andrejbarna_custom_payment_gateway_checkout_form_validate($form, FormStateInterface $form_state) {
  // Check if rate was obtained
  $rate_obtained = \Drupal::state()->get('andrejbarna_custom_payment_gateway_rate_obtained');
  if (!$rate_obtained) {
    $form_state->setError('rate_button', t('Please get the exchange rate before proceeding.'));
  }
}

/**
 * Ajax callback for the Get Rate button.
 */
function andrejbarna_custom_payment_gateway_get_rate_callback(array &$form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  
  /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
  $order = $form_state->get('order');
  if (!$order instanceof OrderInterface) {
    $response->addCommand(new MessageCommand(t('Order not found.'), '#rate-information', ['type' => 'error']));
    return $response;
  }

  try {
    // Get the payment gateway
    $payment_gateway = $order->get('payment_gateway')->entity;
    if (!$payment_gateway) {
      $response->addCommand(new MessageCommand(t('Payment gateway not found.'), '#rate-information', ['type' => 'error']));
      return $response;
    }

    // Get the rate
    $rate_info = $payment_gateway->getPlugin()->getRate($order);
    
    // Build the rate information markup
    $rate_markup = [
      '#theme' => 'andrejbarna_custom_payment_gateway_rate',
      '#rate' => $rate_info['rate'],
      '#currency' => $rate_info['currency'],
      '#amount' => $rate_info['amount'],
      '#formatted_amount' => $rate_info['formatted_amount'],
    ];
    
    // Store that we got the rate
    \Drupal::state()->set('andrejbarna_custom_payment_gateway_rate_obtained', TRUE);
    
    // Enable the payment buttons
    $response->addCommand(new ReplaceCommand('#rate-information', \Drupal::service('renderer')->render($rate_markup)));
    $response->addCommand(new \Drupal\Core\Ajax\InvokeCommand('.payment-button', 'removeAttr', ['disabled']));
  }
  catch (\Exception $e) {
    \Drupal::state()->set('andrejbarna_custom_payment_gateway_rate_obtained', FALSE);
    $response->addCommand(new MessageCommand($e->getMessage(), '#rate-information', ['type' => 'error']));
  }
  
  return $response;
} 